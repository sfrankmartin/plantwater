/**
 * Secure Image Serving Route
 * 
 * Serves uploaded images with proper security headers to prevent XSS attacks.
 * This route adds Content-Security-Policy and other security headers to ensure
 * uploaded images can't execute scripts or access the main application context.
 */

import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ filename: string }> }
) {
  try {
    const { filename } = await params
    
    // SECURITY: Strict filename validation and path traversal protection
    const uploadsRoot = path.join(process.cwd(), 'public', 'uploads', 'plants')
    
    // Strict pattern: Allow secure filename formats generated by our image processor
    // Formats: baseFilename_timestamp_random.webp (e.g., plant_1758083216046_jfue6a.webp)
    // or legacy UUID format: uuid.webp or uuid.extension
    if (!/^[a-zA-Z0-9][a-zA-Z0-9_-]*\.(webp|avif|png|jpg|jpeg)$/.test(filename)) {
      return new NextResponse('Not found', { status: 404 })
    }
    
    // Additional checks for path traversal attempts
    if (filename.includes('..') || 
        filename.includes('/') || 
        filename.includes('\\') ||
        filename.includes('%') ||  // URL encoded traversal
        filename.includes('\0')) { // Null byte injection
      console.warn('SECURITY: Path traversal attempt blocked:', {
        filename,
        ip: request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent'),
        timestamp: new Date().toISOString()
      })
      return new NextResponse('Not found', { status: 404 })
    }
    
    // Construct and validate final path
    const candidate = path.join(uploadsRoot, filename)
    const resolved = path.resolve(candidate)
    
    // Ensure resolved path stays within uploads directory
    if (!resolved.startsWith(path.resolve(uploadsRoot) + path.sep)) {
      console.warn('SECURITY: Directory escape attempt blocked:', {
        filename,
        resolved,
        uploadsRoot: path.resolve(uploadsRoot),
        ip: request.headers.get('x-forwarded-for') || 'unknown',
        timestamp: new Date().toISOString()
      })
      return new NextResponse('Not found', { status: 404 })
    }
    
    // Check if file exists
    try {
      await fs.access(resolved)
    } catch {
      return new NextResponse('Image not found', { status: 404 })
    }

    // Read file using the validated path
    const fileBuffer = await fs.readFile(resolved)
    
    // Determine content type based on file extension
    const ext = path.extname(filename).toLowerCase()
    let contentType = 'application/octet-stream'
    
    switch (ext) {
      case '.webp':
        contentType = 'image/webp'
        break
      case '.jpg':
      case '.jpeg':
        contentType = 'image/jpeg'
        break
      case '.png':
        contentType = 'image/png'
        break
      case '.gif':
        contentType = 'image/gif'
        break
    }

    // Create response with security headers
    const response = new Response(new Uint8Array(fileBuffer), {
      status: 200,
      headers: {
        'Content-Type': contentType,
        'Content-Length': fileBuffer.length.toString(),
        
        // Security headers to prevent XSS and other attacks
        'Content-Security-Policy': "default-src 'none'; img-src 'self'; style-src 'none'; script-src 'none';",
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'DENY',
        'Referrer-Policy': 'no-referrer',
        
        // Cache control for images
        'Cache-Control': 'public, max-age=31536000, immutable',
        
        // Prevent MIME sniffing attacks
        'X-Download-Options': 'noopen',
        'X-Permitted-Cross-Domain-Policies': 'none'
      }
    })

    return response

  } catch (error) {
    console.error('Error serving image:', error)
    return new NextResponse('Internal server error', { status: 500 })
  }
}
